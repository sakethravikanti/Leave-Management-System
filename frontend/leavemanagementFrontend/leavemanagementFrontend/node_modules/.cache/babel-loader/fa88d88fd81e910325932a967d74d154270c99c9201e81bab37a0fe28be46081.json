{"ast":null,"code":"var _jsxFileName = \"E:\\\\elipse-workspace\\\\leavemanagementFrontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport { createContext, useContext, useState, useEffect } from \"react\";\n\n// ✅ Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// ✅ Auth Provider\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authUser, setAuthUser] = useState(null);\n\n  // Load from localStorage when app starts\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"authUser\");\n    if (storedUser) {\n      setAuthUser(JSON.parse(storedUser));\n    }\n  }, []);\n\n  // Save to localStorage whenever authUser changes\n  useEffect(() => {\n    if (authUser) {\n      localStorage.setItem(\"authUser\", JSON.stringify(authUser));\n    } else {\n      localStorage.removeItem(\"authUser\");\n    }\n  }, [authUser]);\n\n  // ✅ Login function (calls backend API)\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(\"http://localhost:8088/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        // ⬅️ allows cookies/session\n        body: JSON.stringify({\n          userEmail: email,\n          userPassword: password\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Invalid credentials\");\n      }\n      const data = await response.json();\n      setAuthUser(data); // Save user (with role, empId, etc.)\n      return {\n        success: true,\n        user: data\n      };\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // ✅ Logout function\n  const logout = () => {\n    setAuthUser(null);\n    localStorage.removeItem(\"authUser\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authUser,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n// ✅ Custom hook for using auth\n_s(AuthProvider, \"QEVkb9rR0uhOoEux/2mRV3PeiYk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authUser","setAuthUser","storedUser","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","login","email","password","response","fetch","method","headers","credentials","body","userEmail","userPassword","ok","Error","data","json","success","user","error","console","message","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["E:/elipse-workspace/leavemanagementFrontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// ✅ Create Context\r\nconst AuthContext = createContext();\r\n\r\n// ✅ Auth Provider\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authUser, setAuthUser] = useState(null);\r\n\r\n  // Load from localStorage when app starts\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"authUser\");\r\n    if (storedUser) {\r\n      setAuthUser(JSON.parse(storedUser));\r\n    }\r\n  }, []);\r\n\r\n  // Save to localStorage whenever authUser changes\r\n  useEffect(() => {\r\n    if (authUser) {\r\n      localStorage.setItem(\"authUser\", JSON.stringify(authUser));\r\n    } else {\r\n      localStorage.removeItem(\"authUser\");\r\n    }\r\n  }, [authUser]);\r\n\r\n  // ✅ Login function (calls backend API)\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8088/api/auth/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        credentials: \"include\", // ⬅️ allows cookies/session\r\n        body: JSON.stringify({ userEmail: email, userPassword: password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Invalid credentials\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setAuthUser(data); // Save user (with role, empId, etc.)\r\n      return { success: true, user: data };\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      return { success: false, message: error.message };\r\n    }\r\n  };\r\n\r\n  // ✅ Logout function\r\n  const logout = () => {\r\n    setAuthUser(null);\r\n    localStorage.removeItem(\"authUser\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authUser, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// ✅ Custom hook for using auth\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEtE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACnD,IAAIF,UAAU,EAAE;MACdD,WAAW,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACrC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAT,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,EAAE;MACZG,YAAY,CAACI,OAAO,CAAC,UAAU,EAAEF,IAAI,CAACG,SAAS,CAACR,QAAQ,CAAC,CAAC;IAC5D,CAAC,MAAM;MACLG,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;IACrC;EACF,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMU,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,WAAW,EAAE,SAAS;QAAE;QACxBC,IAAI,EAAEb,IAAI,CAACG,SAAS,CAAC;UAAEW,SAAS,EAAER,KAAK;UAAES,YAAY,EAAER;QAAS,CAAC;MACnE,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCvB,WAAW,CAACsB,IAAI,CAAC,CAAC,CAAC;MACnB,OAAO;QAAEE,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAEH;MAAK,CAAC;IACtC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEI,OAAO,EAAEF,KAAK,CAACE;MAAQ,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnB7B,WAAW,CAAC,IAAI,CAAC;IACjBE,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;EACrC,CAAC;EAED,oBACEd,OAAA,CAACC,WAAW,CAACmC,QAAQ;IAACC,KAAK,EAAE;MAAEhC,QAAQ;MAAEU,KAAK;MAAEoB;IAAO,CAAE;IAAAhC,QAAA,EACtDA;EAAQ;IAAAmC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAArC,EAAA,CA1DaF,YAAY;AAAAwC,EAAA,GAAZxC,YAAY;AA2DzB,OAAO,MAAMyC,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMhD,UAAU,CAACK,WAAW,CAAC;AAAA;AAAC2C,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}