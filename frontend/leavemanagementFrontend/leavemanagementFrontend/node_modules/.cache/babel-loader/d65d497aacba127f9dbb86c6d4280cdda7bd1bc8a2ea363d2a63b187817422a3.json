{"ast":null,"code":"var _s = $RefreshSig$();\n// src/api/useAuth.js\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nconst API_BASE_URL = 'http://localhost:8080/api/auth';\nconst useAuth = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [role, setRole] = useState(null);\n  const navigate = useNavigate();\n  const login = async (email, password) => {\n    setMessage('');\n    setIsError(false);\n    setRole(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        }),\n        credentials: 'include'\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setRole(data.role);\n\n        // Navigate based on role\n        switch (data.role) {\n          case 'ROLE_ADMIN':\n            navigate('/admindashboard', {\n              replace: true\n            });\n            break;\n          case 'ROLE_MANAGER':\n            navigate('/managerdashboard', {\n              replace: true\n            });\n            break;\n          case 'ROLE_EMPLOYEE':\n            navigate('/employeedashboard', {\n              replace: true\n            });\n            break;\n          default:\n            setMessage('Login successful, but role is unknown.');\n        }\n      } else {\n        setMessage(data.message || 'Invalid email or password');\n        setIsError(true);\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      setMessage('Failed to connect to the server. Please ensure the backend is running.');\n      setIsError(true);\n    }\n  };\n  return {\n    message,\n    isError,\n    role,\n    login\n  };\n};\n_s(useAuth, \"3l1vDIEW4uSOjMlfsRQ9blZfJBc=\", false, function () {\n  return [useNavigate];\n});\nexport default useAuth;","map":{"version":3,"names":["useState","useNavigate","API_BASE_URL","useAuth","_s","message","setMessage","isError","setIsError","role","setRole","navigate","login","email","password","response","fetch","method","headers","body","JSON","stringify","credentials","data","json","ok","replace","error","console"],"sources":["E:/elipse-workspace/leavemanagementFrontend/src/api/useAuth.js"],"sourcesContent":["// src/api/useAuth.js\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api/auth';\r\n\r\nconst useAuth = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [isError, setIsError] = useState(false);\r\n  const [role, setRole] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const login = async (email, password) => {\r\n    setMessage('');\r\n    setIsError(false);\r\n    setRole(null);\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n        credentials: 'include',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setRole(data.role);\r\n\r\n        // Navigate based on role\r\n        switch (data.role) {\r\n          case 'ROLE_ADMIN':\r\n            navigate('/admindashboard', { replace: true });\r\n            break;\r\n          case 'ROLE_MANAGER':\r\n            navigate('/managerdashboard', { replace: true });\r\n            break;\r\n          case 'ROLE_EMPLOYEE':\r\n            navigate('/employeedashboard', { replace: true });\r\n            break;\r\n          default:\r\n            setMessage('Login successful, but role is unknown.');\r\n        }\r\n      } else {\r\n        setMessage(data.message || 'Invalid email or password');\r\n        setIsError(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      setMessage('Failed to connect to the server. Please ensure the backend is running.');\r\n      setIsError(true);\r\n    }\r\n  };\r\n\r\n  return { message, isError, role, login };\r\n};\r\n\r\nexport default useAuth;\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG,gCAAgC;AAErD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAMW,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCR,UAAU,CAAC,EAAE,CAAC;IACdE,UAAU,CAAC,KAAK,CAAC;IACjBE,OAAO,CAAC,IAAI,CAAC;IAEb,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,QAAQ,EAAE;QACpDe,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC,CAAC;QACzCQ,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAElC,IAAIT,QAAQ,CAACU,EAAE,EAAE;QACff,OAAO,CAACa,IAAI,CAACd,IAAI,CAAC;;QAElB;QACA,QAAQc,IAAI,CAACd,IAAI;UACf,KAAK,YAAY;YACfE,QAAQ,CAAC,iBAAiB,EAAE;cAAEe,OAAO,EAAE;YAAK,CAAC,CAAC;YAC9C;UACF,KAAK,cAAc;YACjBf,QAAQ,CAAC,mBAAmB,EAAE;cAAEe,OAAO,EAAE;YAAK,CAAC,CAAC;YAChD;UACF,KAAK,eAAe;YAClBf,QAAQ,CAAC,oBAAoB,EAAE;cAAEe,OAAO,EAAE;YAAK,CAAC,CAAC;YACjD;UACF;YACEpB,UAAU,CAAC,wCAAwC,CAAC;QACxD;MACF,CAAC,MAAM;QACLA,UAAU,CAACiB,IAAI,CAAClB,OAAO,IAAI,2BAA2B,CAAC;QACvDG,UAAU,CAAC,IAAI,CAAC;MAClB;IACF,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCrB,UAAU,CAAC,wEAAwE,CAAC;MACpFE,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC;EAED,OAAO;IAAEH,OAAO;IAAEE,OAAO;IAAEE,IAAI;IAAEG;EAAM,CAAC;AAC1C,CAAC;AAACR,EAAA,CArDID,OAAO;EAAA,QAKMF,WAAW;AAAA;AAkD9B,eAAeE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}