{"ast":null,"code":"var _s = $RefreshSig$();\n/**\r\n * \r\n */\nimport { useState } from 'react';\nconst API_BASE_URL = 'http://localhost:8088/api/auth';\nconst useAuth = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [userInfo, setUserInfo] = useState(null); // store email, role, empId\n\n  const login = async (email, password) => {\n    setMessage('');\n    setIsError(false);\n    setUserInfo(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userEmail: email,\n          userPassword: password\n        }),\n        credentials: 'include' // send session cookie\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Backend returns role like \"ROLE_ADMIN\"\n        const role = data.role;\n        const empId = data.empId;\n        setUserInfo({\n          email: data.email,\n          role,\n          empId\n        });\n        let dashboardMessage = '';\n        switch (role) {\n          case 'ROLE_ADMIN':\n            dashboardMessage = 'Welcome to the Admin Dashboard! + empId: ' + empId;\n            break;\n          case 'ROLE_MANAGER':\n            dashboardMessage = 'Welcome to the Manager Dashboard!+ empId: ' + empId;\n            break;\n          case 'ROLE_EMPLOYEE':\n            dashboardMessage = 'Welcome to the Employee Dashboard!+empId' + empId;\n            break;\n          default:\n            dashboardMessage = 'Login successful, but role is unknown.';\n        }\n        setMessage(dashboardMessage);\n        setIsError(false);\n      } else {\n        setMessage(data.message || 'Invalid email or password.');\n        setIsError(true);\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      setMessage('Failed to connect to the server. Ensure backend is running.');\n      setIsError(true);\n    }\n  };\n  return {\n    message,\n    isError,\n    userInfo,\n    login\n  };\n};\n_s(useAuth, \"d7wpyD89DNnvk3/piObltFeF8tM=\");\nexport default useAuth;","map":{"version":3,"names":["useState","API_BASE_URL","useAuth","_s","message","setMessage","isError","setIsError","userInfo","setUserInfo","login","email","password","response","fetch","method","headers","body","JSON","stringify","userEmail","userPassword","credentials","data","json","ok","role","empId","dashboardMessage","error","console"],"sources":["E:/elipse-workspace/leavemanagementFrontend/src/context/AuthContext.js"],"sourcesContent":["/**\r\n * \r\n */\r\nimport { useState } from 'react';\r\n\r\nconst API_BASE_URL = 'http://localhost:8088/api/auth';\r\n\r\nconst useAuth = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [isError, setIsError] = useState(false);\r\n  const [userInfo, setUserInfo] = useState(null); // store email, role, empId\r\n\r\n  const login = async (email, password) => {\r\n    setMessage('');\r\n    setIsError(false);\r\n    setUserInfo(null);\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ \r\n          userEmail: email,\r\n          userPassword: password\r\n        }),\r\n        credentials: 'include', // send session cookie\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        // Backend returns role like \"ROLE_ADMIN\"\r\n        const role = data.role;\r\n        const empId = data.empId;\r\n\r\n        setUserInfo({ email: data.email, role, empId });\r\n\r\n        let dashboardMessage = '';\r\n        switch (role) {\r\n          case 'ROLE_ADMIN':\r\n            dashboardMessage = 'Welcome to the Admin Dashboard! + empId: ' + empId;\r\n            break;\r\n          case 'ROLE_MANAGER':\r\n            dashboardMessage = 'Welcome to the Manager Dashboard!+ empId: ' + empId;\r\n            break;\r\n          case 'ROLE_EMPLOYEE':\r\n            dashboardMessage = 'Welcome to the Employee Dashboard!+empId' + empId;\r\n            break;\r\n          default:\r\n            dashboardMessage = 'Login successful, but role is unknown.';\r\n        }\r\n\r\n        setMessage(dashboardMessage);\r\n        setIsError(false);\r\n      } else {\r\n        setMessage(data.message || 'Invalid email or password.');\r\n        setIsError(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      setMessage('Failed to connect to the server. Ensure backend is running.');\r\n      setIsError(true);\r\n    }\r\n  };\r\n\r\n  return { message, isError, userInfo, login };\r\n};\r\n\r\nexport default useAuth;\r\n"],"mappings":";AAAA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,YAAY,GAAG,gCAAgC;AAErD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhD,MAAMU,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCP,UAAU,CAAC,EAAE,CAAC;IACdE,UAAU,CAAC,KAAK,CAAC;IACjBE,WAAW,CAAC,IAAI,CAAC;IAEjB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,QAAQ,EAAE;QACpDc,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,SAAS,EAAET,KAAK;UAChBU,YAAY,EAAET;QAChB,CAAC,CAAC;QACFU,WAAW,EAAE,SAAS,CAAE;MAC1B,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAElC,IAAIX,QAAQ,CAACY,EAAE,EAAE;QACf;QACA,MAAMC,IAAI,GAAGH,IAAI,CAACG,IAAI;QACtB,MAAMC,KAAK,GAAGJ,IAAI,CAACI,KAAK;QAExBlB,WAAW,CAAC;UAAEE,KAAK,EAAEY,IAAI,CAACZ,KAAK;UAAEe,IAAI;UAAEC;QAAM,CAAC,CAAC;QAE/C,IAAIC,gBAAgB,GAAG,EAAE;QACzB,QAAQF,IAAI;UACV,KAAK,YAAY;YACfE,gBAAgB,GAAG,2CAA2C,GAAGD,KAAK;YACtE;UACF,KAAK,cAAc;YACjBC,gBAAgB,GAAG,4CAA4C,GAAGD,KAAK;YACvE;UACF,KAAK,eAAe;YAClBC,gBAAgB,GAAG,0CAA0C,GAAGD,KAAK;YACrE;UACF;YACEC,gBAAgB,GAAG,wCAAwC;QAC/D;QAEAvB,UAAU,CAACuB,gBAAgB,CAAC;QAC5BrB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,MAAM;QACLF,UAAU,CAACkB,IAAI,CAACnB,OAAO,IAAI,4BAA4B,CAAC;QACxDG,UAAU,CAAC,IAAI,CAAC;MAClB;IACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCxB,UAAU,CAAC,6DAA6D,CAAC;MACzEE,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC;EAED,OAAO;IAAEH,OAAO;IAAEE,OAAO;IAAEE,QAAQ;IAAEE;EAAM,CAAC;AAC9C,CAAC;AAACP,EAAA,CA3DID,OAAO;AA6Db,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}