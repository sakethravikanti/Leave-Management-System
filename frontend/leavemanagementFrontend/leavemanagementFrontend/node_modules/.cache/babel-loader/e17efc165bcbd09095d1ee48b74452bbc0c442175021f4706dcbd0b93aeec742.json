{"ast":null,"code":"var _jsxFileName = \"E:\\\\elipse-workspace\\\\leavemanagementFrontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\n// Create the Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use the Auth Context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Auth Provider Component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthReady, setIsAuthReady] = useState(false); // New state to track readiness\n  const navigate = useNavigate();\n\n  // Create an Axios instance with a base URL\n  const api = axios.create({\n    baseURL: 'http://localhost:8080/api/auth',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    withCredentials: true\n  });\n  const login = async (userEmail, userPassword) => {\n    try {\n      const response = await api.post('/login', {\n        userEmail,\n        userPassword\n      });\n      const userData = response.data;\n      const userRole = userData.role;\n      const authenticatedUser = {\n        email: userData.email,\n        role: userRole,\n        empId: userData.empId\n      };\n      setUser(authenticatedUser);\n      console.log('User logged in:', authenticatedUser);\n      setIsAuthReady(true); // Set auth state as ready after a successful login\n\n      // Navigate based on the user's role\n      if (userRole === 'ROLE_ADMIN') {\n        navigate('/admindashboard');\n      } else if (userRole === 'ROLE_MANAGER') {\n        navigate('/managerdashboard');\n      } else if (userRole === 'ROLE_EMPLOYEE') {\n        navigate('/employeedashboard');\n      } else {\n        navigate('/');\n      }\n      return {\n        success: true,\n        message: 'Login successful!'\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      let errorMessage = 'Login failed. Please try again.';\n      if (error.response) {\n        // The key change is here: extract the message from the backend response object\n        errorMessage = error.response.data.message || 'Invalid email or password.';\n      } else if (error.request) {\n        errorMessage = 'Network error. Please check your connection.';\n      }\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAuthReady(false);\n    navigate('/');\n  };\n\n  // Check for stored user state on initial load\n  useEffect(() => {\n    // Here you could check for a token in local storage or a cookie\n    // For this example, we'll just set the ready state to true immediately\n    // after the initial render to prevent a flash.\n    setIsAuthReady(true);\n  }, []);\n  const value = {\n    user,\n    isAuthReady,\n    // Expose the new state\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"9FLkvwkxoNsHrNVHVrMLZB7LNFs=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isAuthReady","setIsAuthReady","navigate","api","create","baseURL","headers","withCredentials","login","userEmail","userPassword","response","post","userData","data","userRole","role","authenticatedUser","email","empId","console","log","success","message","error","errorMessage","request","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/elipse-workspace/leavemanagementFrontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// Create the Auth Context\r\nconst AuthContext = createContext(null);\r\n\r\n// Custom hook to use the Auth Context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\n// Auth Provider Component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false); // New state to track readiness\r\n  const navigate = useNavigate();\r\n\r\n  // Create an Axios instance with a base URL\r\n  const api = axios.create({\r\n    baseURL: 'http://localhost:8080/api/auth',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    withCredentials: true,\r\n  });\r\n\r\n  const login = async (userEmail, userPassword) => {\r\n    try {\r\n      const response = await api.post('/login', { userEmail, userPassword });\r\n      \r\n      const userData = response.data;\r\n      const userRole = userData.role;      \r\n      const authenticatedUser = {\r\n        email: userData.email,\r\n        role: userRole,\r\n        empId: userData.empId,\r\n      };\r\n\r\n      setUser(authenticatedUser);\r\n      console.log('User logged in:', authenticatedUser);\r\n      setIsAuthReady(true); // Set auth state as ready after a successful login\r\n\r\n      // Navigate based on the user's role\r\n      if (userRole === 'ROLE_ADMIN') {\r\n        navigate('/admindashboard');\r\n      } else if (userRole === 'ROLE_MANAGER') {\r\n        navigate('/managerdashboard');\r\n      } else if (userRole === 'ROLE_EMPLOYEE') {\r\n        navigate('/employeedashboard');\r\n      } else {\r\n        navigate('/');\r\n      }\r\n      return { success: true, message: 'Login successful!' };\r\n\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      let errorMessage = 'Login failed. Please try again.';\r\n      if (error.response) {\r\n        // The key change is here: extract the message from the backend response object\r\n        errorMessage = error.response.data.message || 'Invalid email or password.';\r\n      } else if (error.request) {\r\n        errorMessage = 'Network error. Please check your connection.';\r\n      }\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthReady(false);\r\n    navigate('/');\r\n  };\r\n\r\n  // Check for stored user state on initial load\r\n  useEffect(() => {\r\n    // Here you could check for a token in local storage or a cookie\r\n    // For this example, we'll just set the ready state to true immediately\r\n    // after the initial render to prevent a flash.\r\n    setIsAuthReady(true);\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthReady, // Expose the new state\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGR,aAAa,CAAC,IAAI,CAAC;;AAEvC;AACA,OAAO,MAAMS,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,OAAOT,UAAU,CAACO,WAAW,CAAC;AAChC,CAAC;;AAED;AAAAE,EAAA,CAJaD,OAAO;AAKpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvD,MAAMgB,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMe,GAAG,GAAGd,KAAK,CAACe,MAAM,CAAC;IACvBC,OAAO,EAAE,gCAAgC;IACzCC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,eAAe,EAAE;EACnB,CAAC,CAAC;EAEF,MAAMC,KAAK,GAAG,MAAAA,CAAOC,SAAS,EAAEC,YAAY,KAAK;IAC/C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,QAAQ,EAAE;QAAEH,SAAS;QAAEC;MAAa,CAAC,CAAC;MAEtE,MAAMG,QAAQ,GAAGF,QAAQ,CAACG,IAAI;MAC9B,MAAMC,QAAQ,GAAGF,QAAQ,CAACG,IAAI;MAC9B,MAAMC,iBAAiB,GAAG;QACxBC,KAAK,EAAEL,QAAQ,CAACK,KAAK;QACrBF,IAAI,EAAED,QAAQ;QACdI,KAAK,EAAEN,QAAQ,CAACM;MAClB,CAAC;MAEDpB,OAAO,CAACkB,iBAAiB,CAAC;MAC1BG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,iBAAiB,CAAC;MACjDhB,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;;MAEtB;MACA,IAAIc,QAAQ,KAAK,YAAY,EAAE;QAC7Bb,QAAQ,CAAC,iBAAiB,CAAC;MAC7B,CAAC,MAAM,IAAIa,QAAQ,KAAK,cAAc,EAAE;QACtCb,QAAQ,CAAC,mBAAmB,CAAC;MAC/B,CAAC,MAAM,IAAIa,QAAQ,KAAK,eAAe,EAAE;QACvCb,QAAQ,CAAC,oBAAoB,CAAC;MAChC,CAAC,MAAM;QACLA,QAAQ,CAAC,GAAG,CAAC;MACf;MACA,OAAO;QAAEoB,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAoB,CAAC;IAExD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,IAAIC,YAAY,GAAG,iCAAiC;MACpD,IAAID,KAAK,CAACb,QAAQ,EAAE;QAClB;QACAc,YAAY,GAAGD,KAAK,CAACb,QAAQ,CAACG,IAAI,CAACS,OAAO,IAAI,4BAA4B;MAC5E,CAAC,MAAM,IAAIC,KAAK,CAACE,OAAO,EAAE;QACxBD,YAAY,GAAG,8CAA8C;MAC/D;MACA,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEE;MAAa,CAAC;IAClD;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnB5B,OAAO,CAAC,IAAI,CAAC;IACbE,cAAc,CAAC,KAAK,CAAC;IACrBC,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACAc,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM2B,KAAK,GAAG;IACZ9B,IAAI;IACJE,WAAW;IAAE;IACbQ,KAAK;IACLmB;EACF,CAAC;EAED,oBAAOpC,OAAA,CAACC,WAAW,CAACqC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhC,QAAA,EAAEA;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACpC,GAAA,CA7EWF,YAAY;EAAA,QAGNP,WAAW;AAAA;AAAA8C,EAAA,GAHjBvC,YAAY;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}