{"ast":null,"code":"/*import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { login as loginAPI } from \"../api/auth\";\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const login = async (userEmail, userPassword) => {\r\n    try {\r\n      const response = await loginAPI(userEmail, userPassword); \r\n      const userData = response.data;\r\n\r\n      const authenticatedUser = {\r\n        email: userData.email,\r\n        role: userData.role,\r\n        empId: userData.empId,\r\n      };\r\n\r\n      setUser(authenticatedUser);\r\n      setIsAuthReady(true);\r\n\r\n      if (userData.role === \"ROLE_ADMIN\") navigate(\"/admindashboard\");\r\n      else if (userData.role === \"ROLE_MANAGER\") navigate(\"/managerdashboard\");\r\n      else if (userData.role === \"ROLE_EMPLOYEE\") navigate(\"/employeedashboard\");\r\n      else navigate(\"/\");\r\n\r\n      return { success: true, message: \"Login successful!\" };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      let errorMessage = \"Login failed. Please try again.\";\r\n      if (error.response) errorMessage = error.response.data.message || errorMessage;\r\n      else if (error.request) errorMessage = \"Network error. Please check your connection.\";\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthReady(false);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsAuthReady(true);\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthReady,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};*/\n\n/*\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { login as loginAPI } from \"../api/auth\";\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n  const [authError, setAuthError] = useState(null); \r\n  const navigate = useNavigate();\r\n\r\n  const login = async (userEmail, userPassword) => {\r\n    try {\r\n      const response = await loginAPI(userEmail, userPassword);\r\n      const userData = response.data;\r\n\r\n      const authenticatedUser = {\r\n        email: userData.email,\r\n        role: userData.role,\r\n        empId: userData.empId,\r\n      };\r\n\r\n      setUser(authenticatedUser);\r\n      setIsAuthReady(true);\r\n      setAuthError(null); \r\n      if (userData.role === \"ROLE_ADMIN\") navigate(\"/admindashboard\");\r\n      else if (userData.role === \"ROLE_MANAGER\") navigate(\"/managerdashboard\");\r\n      else if (userData.role === \"ROLE_EMPLOYEE\") navigate(\"/employeedashboard\");\r\n      else navigate(\"/\");\r\n\r\n      return { success: true, message: \"Login successful!\" };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n\r\n      let errorMessage = \"Login failed. Please try again.\";\r\n\r\n      if (error.response && error.response.data) {\r\n        errorMessage =\r\n          \"Invalid email or password. Please try again.\";\r\n      } else if (error.request) {\r\n        errorMessage = \"Network error. Please check your connection.\";\r\n      }\r\n\r\n      setAuthError(errorMessage); \r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthReady(false);\r\n    setAuthError(null);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsAuthReady(true);\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthReady,\r\n    authError,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n*/","map":{"version":3,"names":[],"sources":["D:/LeavemanagementSystem/frontend/leavemanagementFrontend/leavemanagementFrontend/src/context/AuthContext.js"],"sourcesContent":["/*import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { login as loginAPI } from \"../api/auth\";\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const login = async (userEmail, userPassword) => {\r\n    try {\r\n      const response = await loginAPI(userEmail, userPassword); \r\n      const userData = response.data;\r\n\r\n      const authenticatedUser = {\r\n        email: userData.email,\r\n        role: userData.role,\r\n        empId: userData.empId,\r\n      };\r\n\r\n      setUser(authenticatedUser);\r\n      setIsAuthReady(true);\r\n\r\n      if (userData.role === \"ROLE_ADMIN\") navigate(\"/admindashboard\");\r\n      else if (userData.role === \"ROLE_MANAGER\") navigate(\"/managerdashboard\");\r\n      else if (userData.role === \"ROLE_EMPLOYEE\") navigate(\"/employeedashboard\");\r\n      else navigate(\"/\");\r\n\r\n      return { success: true, message: \"Login successful!\" };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      let errorMessage = \"Login failed. Please try again.\";\r\n      if (error.response) errorMessage = error.response.data.message || errorMessage;\r\n      else if (error.request) errorMessage = \"Network error. Please check your connection.\";\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthReady(false);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsAuthReady(true);\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthReady,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};*/\r\n\r\n/*\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { login as loginAPI } from \"../api/auth\";\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n  const [authError, setAuthError] = useState(null); \r\n  const navigate = useNavigate();\r\n\r\n  const login = async (userEmail, userPassword) => {\r\n    try {\r\n      const response = await loginAPI(userEmail, userPassword);\r\n      const userData = response.data;\r\n\r\n      const authenticatedUser = {\r\n        email: userData.email,\r\n        role: userData.role,\r\n        empId: userData.empId,\r\n      };\r\n\r\n      setUser(authenticatedUser);\r\n      setIsAuthReady(true);\r\n      setAuthError(null); \r\n      if (userData.role === \"ROLE_ADMIN\") navigate(\"/admindashboard\");\r\n      else if (userData.role === \"ROLE_MANAGER\") navigate(\"/managerdashboard\");\r\n      else if (userData.role === \"ROLE_EMPLOYEE\") navigate(\"/employeedashboard\");\r\n      else navigate(\"/\");\r\n\r\n      return { success: true, message: \"Login successful!\" };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n\r\n      let errorMessage = \"Login failed. Please try again.\";\r\n\r\n      if (error.response && error.response.data) {\r\n        errorMessage =\r\n          \"Invalid email or password. Please try again.\";\r\n      } else if (error.request) {\r\n        errorMessage = \"Network error. Please check your connection.\";\r\n      }\r\n\r\n      setAuthError(errorMessage); \r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthReady(false);\r\n    setAuthError(null);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsAuthReady(true);\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthReady,\r\n    authError,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}