{"ast":null,"code":"var _jsxFileName = \"E:\\\\elipse-workspace\\\\leavemanagementFrontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/*import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { login as loginAPI } from \"../api/auth\";\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const login = async (userEmail, userPassword) => {\r\n    try {\r\n      const response = await loginAPI(userEmail, userPassword); \r\n      const userData = response.data;\r\n\r\n      const authenticatedUser = {\r\n        email: userData.email,\r\n        role: userData.role,\r\n        empId: userData.empId,\r\n      };\r\n\r\n      setUser(authenticatedUser);\r\n      setIsAuthReady(true);\r\n\r\n      if (userData.role === \"ROLE_ADMIN\") navigate(\"/admindashboard\");\r\n      else if (userData.role === \"ROLE_MANAGER\") navigate(\"/managerdashboard\");\r\n      else if (userData.role === \"ROLE_EMPLOYEE\") navigate(\"/employeedashboard\");\r\n      else navigate(\"/\");\r\n\r\n      return { success: true, message: \"Login successful!\" };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      let errorMessage = \"Login failed. Please try again.\";\r\n      if (error.response) errorMessage = error.response.data.message || errorMessage;\r\n      else if (error.request) errorMessage = \"Network error. Please check your connection.\";\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthReady(false);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsAuthReady(true);\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthReady,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};*/\n\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { login as loginAPI } from \"../api/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthReady, setIsAuthReady] = useState(false);\n  const [authError, setAuthError] = useState(null);\n  const navigate = useNavigate();\n  const login = async (userEmail, userPassword) => {\n    try {\n      const response = await loginAPI(userEmail, userPassword);\n      const userData = response.data;\n      const authenticatedUser = {\n        email: userData.email,\n        role: userData.role,\n        empId: userData.empId\n      };\n      setUser(authenticatedUser);\n      setIsAuthReady(true);\n      setAuthError(null); // <-- Clear error on success\n\n      // Navigate based on role\n      if (userData.role === \"ROLE_ADMIN\") navigate(\"/admindashboard\");else if (userData.role === \"ROLE_MANAGER\") navigate(\"/managerdashboard\");else if (userData.role === \"ROLE_EMPLOYEE\") navigate(\"/employeedashboard\");else navigate(\"/\");\n      return {\n        success: true,\n        message: \"Login successful!\"\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n\n      // Default error\n      let errorMessage = \"Login failed. Please try again.\";\n\n      // If backend sent a structured error\n      if (error.response && error.response.data) {\n        errorMessage = \"Invalid email or password. Please try again.\";\n      } else if (error.request) {\n        errorMessage = \"Network error. Please check your connection.\";\n      }\n      setAuthError(errorMessage); // <-- Save error in context\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAuthReady(false);\n    setAuthError(null);\n    navigate(\"/\");\n  };\n  useEffect(() => {\n    setIsAuthReady(true);\n  }, []);\n  const value = {\n    user,\n    isAuthReady,\n    authError,\n    // <-- Expose error for UI\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"+/FMscm/K6+xfHLzmxmo/0V4yB4=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","login","loginAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isAuthReady","setIsAuthReady","authError","setAuthError","navigate","userEmail","userPassword","response","userData","data","authenticatedUser","email","role","empId","success","message","error","console","errorMessage","request","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/elipse-workspace/leavemanagementFrontend/src/context/AuthContext.js"],"sourcesContent":["/*import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { login as loginAPI } from \"../api/auth\";\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const login = async (userEmail, userPassword) => {\r\n    try {\r\n      const response = await loginAPI(userEmail, userPassword); \r\n      const userData = response.data;\r\n\r\n      const authenticatedUser = {\r\n        email: userData.email,\r\n        role: userData.role,\r\n        empId: userData.empId,\r\n      };\r\n\r\n      setUser(authenticatedUser);\r\n      setIsAuthReady(true);\r\n\r\n      if (userData.role === \"ROLE_ADMIN\") navigate(\"/admindashboard\");\r\n      else if (userData.role === \"ROLE_MANAGER\") navigate(\"/managerdashboard\");\r\n      else if (userData.role === \"ROLE_EMPLOYEE\") navigate(\"/employeedashboard\");\r\n      else navigate(\"/\");\r\n\r\n      return { success: true, message: \"Login successful!\" };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      let errorMessage = \"Login failed. Please try again.\";\r\n      if (error.response) errorMessage = error.response.data.message || errorMessage;\r\n      else if (error.request) errorMessage = \"Network error. Please check your connection.\";\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthReady(false);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsAuthReady(true);\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthReady,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};*/\r\n\r\n\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { login as loginAPI } from \"../api/auth\";\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n  const [authError, setAuthError] = useState(null); \r\n  const navigate = useNavigate();\r\n\r\n  const login = async (userEmail, userPassword) => {\r\n    try {\r\n      const response = await loginAPI(userEmail, userPassword);\r\n      const userData = response.data;\r\n\r\n      const authenticatedUser = {\r\n        email: userData.email,\r\n        role: userData.role,\r\n        empId: userData.empId,\r\n      };\r\n\r\n      setUser(authenticatedUser);\r\n      setIsAuthReady(true);\r\n      setAuthError(null); // <-- Clear error on success\r\n\r\n      // Navigate based on role\r\n      if (userData.role === \"ROLE_ADMIN\") navigate(\"/admindashboard\");\r\n      else if (userData.role === \"ROLE_MANAGER\") navigate(\"/managerdashboard\");\r\n      else if (userData.role === \"ROLE_EMPLOYEE\") navigate(\"/employeedashboard\");\r\n      else navigate(\"/\");\r\n\r\n      return { success: true, message: \"Login successful!\" };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n\r\n      // Default error\r\n      let errorMessage = \"Login failed. Please try again.\";\r\n\r\n      // If backend sent a structured error\r\n      if (error.response && error.response.data) {\r\n        errorMessage =\r\n          \"Invalid email or password. Please try again.\";\r\n      } else if (error.request) {\r\n        errorMessage = \"Network error. Please check your connection.\";\r\n      }\r\n\r\n      setAuthError(errorMessage); // <-- Save error in context\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthReady(false);\r\n    setAuthError(null);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsAuthReady(true);\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthReady,\r\n    authError, // <-- Expose error for UI\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}